{
  "Comment": "A description of my state machine",
  "StartAt": "Lambda Invoke - Gen Account List",
  "States": {
    "Lambda Invoke - Gen Account List": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "${LambdaAccountGenFunction}:$LATEST"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "Map - Accounts"
    },
    "Map - Accounts": {
      "Type": "Map",
      "Iterator": {
        "StartAt": "Lambda Invoke - Gen Report",
        "States": {
          "Lambda Invoke - Gen Report": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "OutputPath": "$.Payload",
            "Parameters": {
              "Payload.$": "$",
              "FunctionName": "${LambdaReportGenFunction}:$LATEST"
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException"
                ],
                "IntervalSeconds": 2,
                "MaxAttempts": 6,
                "BackoffRate": 2
              }
            ],
            "Next": "Choice"
          },
          "Choice": {
            "Type": "Choice",
            "Choices": [
              {
                "Variable": "$.funcState",
                "StringMatches": "complete",
                "Next": "Pass to end - Success"
              },
              {
                "And": [
                  {
                    "Variable": "$.funcState",
                    "StringMatches": "not complete"
                  },
                  {
                    "Variable": "$.LoopAgain",
                    "StringMatches": "yes"
                  }
                ],
                "Next": "Wait"
              },
              {
                "Variable": "$.funcState",
                "StringMatches": "error",
                "Next": "SNS Publish"
              }
            ],
            "Default": "SNS Publish"
          },
          "SNS Publish": {
            "Type": "Task",
            "Resource": "arn:aws:states:::sns:publish",
            "Parameters": {
              "TopicArn": "${SNSTopicReportGenErrors}",
              "Subject": "IAM Credential Report Failed to generate",
              "Message.$": "States.Format('The generation of the IAM Crendential report failed for {} with error message: {}', $.accountId,$.ErrorMessage)"
            },
            "End": true
          },
          "Pass to end - Success": {
            "Type": "Pass",
            "End": true
          },
          "Wait": {
            "Type": "Wait",
            "Seconds": 1,
            "Next": "Lambda Invoke - Gen Report"
          }
        }
      },
      "MaxConcurrency": 10,
      "End": true
    }
  }
}
